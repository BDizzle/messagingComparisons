// Generated by ProtoGen, Version=2.4.1.473, Culture=neutral, PublicKeyToken=55f7125234beb589.  DO NOT EDIT!
#pragma warning disable 1591, 0612
#region Designer generated code

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
namespace TRMS.MessagingComparisons.Protos {
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public static partial class BenchmarkProtos {
  
    #region Extension registration
    public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
    }
    #endregion
    #region Static variables
    internal static pbd::MessageDescriptor internal__static_benchmarks_Command__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::TRMS.MessagingComparisons.Protos.Command, global::TRMS.MessagingComparisons.Protos.Command.Builder> internal__static_benchmarks_Command__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_benchmarks_CommandResponse__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::TRMS.MessagingComparisons.Protos.CommandResponse, global::TRMS.MessagingComparisons.Protos.CommandResponse.Builder> internal__static_benchmarks_CommandResponse__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_benchmarks_DataRequest__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::TRMS.MessagingComparisons.Protos.DataRequest, global::TRMS.MessagingComparisons.Protos.DataRequest.Builder> internal__static_benchmarks_DataRequest__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_benchmarks_DataRequestResponse__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::TRMS.MessagingComparisons.Protos.DataRequestResponse, global::TRMS.MessagingComparisons.Protos.DataRequestResponse.Builder> internal__static_benchmarks_DataRequestResponse__FieldAccessorTable;
    #endregion
    #region Descriptor
    public static pbd::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbd::FileDescriptor descriptor;
    
    static BenchmarkProtos() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          "ChBiZW5jaG1hcmtzLnByb3RvEgpiZW5jaG1hcmtzGiRnb29nbGUvcHJvdG9i" + 
          "dWYvY3NoYXJwX29wdGlvbnMucHJvdG8ihAIKB0NvbW1hbmQSEwoLY29tbWFu" + 
          "ZE5hbWUYASABKAkSDgoGcmVnaW9uGAIgASgFEhUKDXZpZGVvRmlsZU5hbWUY" + 
          "AyABKAkSFgoOYXVkaW9GaWxlTmFtZTAYBCABKAkSFgoOYXVkaW9GaWxlTmFt" + 
          "ZTEYBSABKAkSFgoOYXVkaW9GaWxlTmFtZTIYBiABKAkSFgoOYXVkaW9GaWxl" + 
          "TmFtZTMYByABKAkSEwoLdmJpRmlsZU5hbWUYCCABKAkSDwoHdXNlVERJUhgJ" + 
          "IAEoCBIUCgxpbml0aWFsRnJhbWUYCiABKA0SEwoLaW5pdGlhbFJhdGUYCyAB" + 
          "KAESDAoEbG9vcBgMIAEoCCIyCg9Db21tYW5kUmVzcG9uc2USCgoCaHIYASAB" + 
          "KAUSEwoLZGVzY3JpcHRpb24YAiABKAkiSQoLRGF0YVJlcXVlc3QSDwoHY29t" + 
          "bWFuZBgBIAEoCRIVCg12aWRlb0ZpbGVOYW1lGAIgASgJEhIKCnJlc29sdXRp" + 
          "b24YAyABKAki6wEKE0RhdGFSZXF1ZXN0UmVzcG9uc2USFQoNdmlkZW9GaWxl" + 
          "TmFtZRgBIAEoCRIXCg9hdWRpb1NhbXBsZVJhdGUYAiABKA0SEgoKdmlkZW9D" + 
          "b2RlYxgDIAEoCRISCgpyZXNvbHV0aW9uGAQgASgJEg8KB2JpdHJhdGUYBSAB" + 
          "KAUSEQoJZnJhbWVSYXRlGAYgASgBEg8KB2RlY29kZXIYByABKAkSEgoKYXVk" + 
          "aW9Db2RlYxgIIAEoCRIaChJhdWRpb0JpdHNQZXJTYW1wbGUYCSABKAUSFwoP" + 
          "YXVkaW9UcmFja0NvdW50GAogASgFQjhIAcI+MwogVFJNUy5NZXNzYWdpbmdD" + 
          "b21wYXJpc29ucy5Qcm90b3MSD0JlbmNobWFya1Byb3Rvcw==");
      pbd::FileDescriptor.InternalDescriptorAssigner assigner = delegate(pbd::FileDescriptor root) {
        descriptor = root;
        internal__static_benchmarks_Command__Descriptor = Descriptor.MessageTypes[0];
        internal__static_benchmarks_Command__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::TRMS.MessagingComparisons.Protos.Command, global::TRMS.MessagingComparisons.Protos.Command.Builder>(internal__static_benchmarks_Command__Descriptor,
                new string[] { "CommandName", "Region", "VideoFileName", "AudioFileName0", "AudioFileName1", "AudioFileName2", "AudioFileName3", "VbiFileName", "UseTDIR", "InitialFrame", "InitialRate", "Loop", });
        internal__static_benchmarks_CommandResponse__Descriptor = Descriptor.MessageTypes[1];
        internal__static_benchmarks_CommandResponse__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::TRMS.MessagingComparisons.Protos.CommandResponse, global::TRMS.MessagingComparisons.Protos.CommandResponse.Builder>(internal__static_benchmarks_CommandResponse__Descriptor,
                new string[] { "Hr", "Description", });
        internal__static_benchmarks_DataRequest__Descriptor = Descriptor.MessageTypes[2];
        internal__static_benchmarks_DataRequest__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::TRMS.MessagingComparisons.Protos.DataRequest, global::TRMS.MessagingComparisons.Protos.DataRequest.Builder>(internal__static_benchmarks_DataRequest__Descriptor,
                new string[] { "Command", "VideoFileName", "Resolution", });
        internal__static_benchmarks_DataRequestResponse__Descriptor = Descriptor.MessageTypes[3];
        internal__static_benchmarks_DataRequestResponse__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::TRMS.MessagingComparisons.Protos.DataRequestResponse, global::TRMS.MessagingComparisons.Protos.DataRequestResponse.Builder>(internal__static_benchmarks_DataRequestResponse__Descriptor,
                new string[] { "VideoFileName", "AudioSampleRate", "VideoCodec", "Resolution", "Bitrate", "FrameRate", "Decoder", "AudioCodec", "AudioBitsPerSample", "AudioTrackCount", });
        pb::ExtensionRegistry registry = pb::ExtensionRegistry.CreateInstance();
        RegisterAllExtensions(registry);
        global::Google.ProtocolBuffers.DescriptorProtos.CSharpOptions.RegisterAllExtensions(registry);
        return registry;
      };
      pbd::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
          new pbd::FileDescriptor[] {
          global::Google.ProtocolBuffers.DescriptorProtos.CSharpOptions.Descriptor, 
          }, assigner);
    }
    #endregion
    
  }
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class Command : pb::GeneratedMessage<Command, Command.Builder> {
    private Command() { }
    private static readonly Command defaultInstance = new Command().MakeReadOnly();
    private static readonly string[] _commandFieldNames = new string[] { "audioFileName0", "audioFileName1", "audioFileName2", "audioFileName3", "commandName", "initialFrame", "initialRate", "loop", "region", "useTDIR", "vbiFileName", "videoFileName" };
    private static readonly uint[] _commandFieldTags = new uint[] { 34, 42, 50, 58, 10, 80, 89, 96, 16, 72, 66, 26 };
    public static Command DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Command DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Command ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::TRMS.MessagingComparisons.Protos.BenchmarkProtos.internal__static_benchmarks_Command__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Command, Command.Builder> InternalFieldAccessors {
      get { return global::TRMS.MessagingComparisons.Protos.BenchmarkProtos.internal__static_benchmarks_Command__FieldAccessorTable; }
    }
    
    public const int CommandNameFieldNumber = 1;
    private bool hasCommandName;
    private string commandName_ = "";
    public bool HasCommandName {
      get { return hasCommandName; }
    }
    public string CommandName {
      get { return commandName_; }
    }
    
    public const int RegionFieldNumber = 2;
    private bool hasRegion;
    private int region_;
    public bool HasRegion {
      get { return hasRegion; }
    }
    public int Region {
      get { return region_; }
    }
    
    public const int VideoFileNameFieldNumber = 3;
    private bool hasVideoFileName;
    private string videoFileName_ = "";
    public bool HasVideoFileName {
      get { return hasVideoFileName; }
    }
    public string VideoFileName {
      get { return videoFileName_; }
    }
    
    public const int AudioFileName0FieldNumber = 4;
    private bool hasAudioFileName0;
    private string audioFileName0_ = "";
    public bool HasAudioFileName0 {
      get { return hasAudioFileName0; }
    }
    public string AudioFileName0 {
      get { return audioFileName0_; }
    }
    
    public const int AudioFileName1FieldNumber = 5;
    private bool hasAudioFileName1;
    private string audioFileName1_ = "";
    public bool HasAudioFileName1 {
      get { return hasAudioFileName1; }
    }
    public string AudioFileName1 {
      get { return audioFileName1_; }
    }
    
    public const int AudioFileName2FieldNumber = 6;
    private bool hasAudioFileName2;
    private string audioFileName2_ = "";
    public bool HasAudioFileName2 {
      get { return hasAudioFileName2; }
    }
    public string AudioFileName2 {
      get { return audioFileName2_; }
    }
    
    public const int AudioFileName3FieldNumber = 7;
    private bool hasAudioFileName3;
    private string audioFileName3_ = "";
    public bool HasAudioFileName3 {
      get { return hasAudioFileName3; }
    }
    public string AudioFileName3 {
      get { return audioFileName3_; }
    }
    
    public const int VbiFileNameFieldNumber = 8;
    private bool hasVbiFileName;
    private string vbiFileName_ = "";
    public bool HasVbiFileName {
      get { return hasVbiFileName; }
    }
    public string VbiFileName {
      get { return vbiFileName_; }
    }
    
    public const int UseTDIRFieldNumber = 9;
    private bool hasUseTDIR;
    private bool useTDIR_;
    public bool HasUseTDIR {
      get { return hasUseTDIR; }
    }
    public bool UseTDIR {
      get { return useTDIR_; }
    }
    
    public const int InitialFrameFieldNumber = 10;
    private bool hasInitialFrame;
    private uint initialFrame_;
    public bool HasInitialFrame {
      get { return hasInitialFrame; }
    }
    [global::System.CLSCompliant(false)]
    public uint InitialFrame {
      get { return initialFrame_; }
    }
    
    public const int InitialRateFieldNumber = 11;
    private bool hasInitialRate;
    private double initialRate_;
    public bool HasInitialRate {
      get { return hasInitialRate; }
    }
    public double InitialRate {
      get { return initialRate_; }
    }
    
    public const int LoopFieldNumber = 12;
    private bool hasLoop;
    private bool loop_;
    public bool HasLoop {
      get { return hasLoop; }
    }
    public bool Loop {
      get { return loop_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _commandFieldNames;
      if (hasCommandName) {
        output.WriteString(1, field_names[4], CommandName);
      }
      if (hasRegion) {
        output.WriteInt32(2, field_names[8], Region);
      }
      if (hasVideoFileName) {
        output.WriteString(3, field_names[11], VideoFileName);
      }
      if (hasAudioFileName0) {
        output.WriteString(4, field_names[0], AudioFileName0);
      }
      if (hasAudioFileName1) {
        output.WriteString(5, field_names[1], AudioFileName1);
      }
      if (hasAudioFileName2) {
        output.WriteString(6, field_names[2], AudioFileName2);
      }
      if (hasAudioFileName3) {
        output.WriteString(7, field_names[3], AudioFileName3);
      }
      if (hasVbiFileName) {
        output.WriteString(8, field_names[10], VbiFileName);
      }
      if (hasUseTDIR) {
        output.WriteBool(9, field_names[9], UseTDIR);
      }
      if (hasInitialFrame) {
        output.WriteUInt32(10, field_names[5], InitialFrame);
      }
      if (hasInitialRate) {
        output.WriteDouble(11, field_names[6], InitialRate);
      }
      if (hasLoop) {
        output.WriteBool(12, field_names[7], Loop);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasCommandName) {
          size += pb::CodedOutputStream.ComputeStringSize(1, CommandName);
        }
        if (hasRegion) {
          size += pb::CodedOutputStream.ComputeInt32Size(2, Region);
        }
        if (hasVideoFileName) {
          size += pb::CodedOutputStream.ComputeStringSize(3, VideoFileName);
        }
        if (hasAudioFileName0) {
          size += pb::CodedOutputStream.ComputeStringSize(4, AudioFileName0);
        }
        if (hasAudioFileName1) {
          size += pb::CodedOutputStream.ComputeStringSize(5, AudioFileName1);
        }
        if (hasAudioFileName2) {
          size += pb::CodedOutputStream.ComputeStringSize(6, AudioFileName2);
        }
        if (hasAudioFileName3) {
          size += pb::CodedOutputStream.ComputeStringSize(7, AudioFileName3);
        }
        if (hasVbiFileName) {
          size += pb::CodedOutputStream.ComputeStringSize(8, VbiFileName);
        }
        if (hasUseTDIR) {
          size += pb::CodedOutputStream.ComputeBoolSize(9, UseTDIR);
        }
        if (hasInitialFrame) {
          size += pb::CodedOutputStream.ComputeUInt32Size(10, InitialFrame);
        }
        if (hasInitialRate) {
          size += pb::CodedOutputStream.ComputeDoubleSize(11, InitialRate);
        }
        if (hasLoop) {
          size += pb::CodedOutputStream.ComputeBoolSize(12, Loop);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static Command ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Command ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Command ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Command ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Command ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Command ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Command ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Command ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Command ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Command ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Command MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Command prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<Command, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Command cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Command result;
      
      private Command PrepareBuilder() {
        if (resultIsReadOnly) {
          Command original = result;
          result = new Command();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Command MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::TRMS.MessagingComparisons.Protos.Command.Descriptor; }
      }
      
      public override Command DefaultInstanceForType {
        get { return global::TRMS.MessagingComparisons.Protos.Command.DefaultInstance; }
      }
      
      public override Command BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Command) {
          return MergeFrom((Command) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Command other) {
        if (other == global::TRMS.MessagingComparisons.Protos.Command.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasCommandName) {
          CommandName = other.CommandName;
        }
        if (other.HasRegion) {
          Region = other.Region;
        }
        if (other.HasVideoFileName) {
          VideoFileName = other.VideoFileName;
        }
        if (other.HasAudioFileName0) {
          AudioFileName0 = other.AudioFileName0;
        }
        if (other.HasAudioFileName1) {
          AudioFileName1 = other.AudioFileName1;
        }
        if (other.HasAudioFileName2) {
          AudioFileName2 = other.AudioFileName2;
        }
        if (other.HasAudioFileName3) {
          AudioFileName3 = other.AudioFileName3;
        }
        if (other.HasVbiFileName) {
          VbiFileName = other.VbiFileName;
        }
        if (other.HasUseTDIR) {
          UseTDIR = other.UseTDIR;
        }
        if (other.HasInitialFrame) {
          InitialFrame = other.InitialFrame;
        }
        if (other.HasInitialRate) {
          InitialRate = other.InitialRate;
        }
        if (other.HasLoop) {
          Loop = other.Loop;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_commandFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _commandFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasCommandName = input.ReadString(ref result.commandName_);
              break;
            }
            case 16: {
              result.hasRegion = input.ReadInt32(ref result.region_);
              break;
            }
            case 26: {
              result.hasVideoFileName = input.ReadString(ref result.videoFileName_);
              break;
            }
            case 34: {
              result.hasAudioFileName0 = input.ReadString(ref result.audioFileName0_);
              break;
            }
            case 42: {
              result.hasAudioFileName1 = input.ReadString(ref result.audioFileName1_);
              break;
            }
            case 50: {
              result.hasAudioFileName2 = input.ReadString(ref result.audioFileName2_);
              break;
            }
            case 58: {
              result.hasAudioFileName3 = input.ReadString(ref result.audioFileName3_);
              break;
            }
            case 66: {
              result.hasVbiFileName = input.ReadString(ref result.vbiFileName_);
              break;
            }
            case 72: {
              result.hasUseTDIR = input.ReadBool(ref result.useTDIR_);
              break;
            }
            case 80: {
              result.hasInitialFrame = input.ReadUInt32(ref result.initialFrame_);
              break;
            }
            case 89: {
              result.hasInitialRate = input.ReadDouble(ref result.initialRate_);
              break;
            }
            case 96: {
              result.hasLoop = input.ReadBool(ref result.loop_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasCommandName {
        get { return result.hasCommandName; }
      }
      public string CommandName {
        get { return result.CommandName; }
        set { SetCommandName(value); }
      }
      public Builder SetCommandName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasCommandName = true;
        result.commandName_ = value;
        return this;
      }
      public Builder ClearCommandName() {
        PrepareBuilder();
        result.hasCommandName = false;
        result.commandName_ = "";
        return this;
      }
      
      public bool HasRegion {
        get { return result.hasRegion; }
      }
      public int Region {
        get { return result.Region; }
        set { SetRegion(value); }
      }
      public Builder SetRegion(int value) {
        PrepareBuilder();
        result.hasRegion = true;
        result.region_ = value;
        return this;
      }
      public Builder ClearRegion() {
        PrepareBuilder();
        result.hasRegion = false;
        result.region_ = 0;
        return this;
      }
      
      public bool HasVideoFileName {
        get { return result.hasVideoFileName; }
      }
      public string VideoFileName {
        get { return result.VideoFileName; }
        set { SetVideoFileName(value); }
      }
      public Builder SetVideoFileName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasVideoFileName = true;
        result.videoFileName_ = value;
        return this;
      }
      public Builder ClearVideoFileName() {
        PrepareBuilder();
        result.hasVideoFileName = false;
        result.videoFileName_ = "";
        return this;
      }
      
      public bool HasAudioFileName0 {
        get { return result.hasAudioFileName0; }
      }
      public string AudioFileName0 {
        get { return result.AudioFileName0; }
        set { SetAudioFileName0(value); }
      }
      public Builder SetAudioFileName0(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasAudioFileName0 = true;
        result.audioFileName0_ = value;
        return this;
      }
      public Builder ClearAudioFileName0() {
        PrepareBuilder();
        result.hasAudioFileName0 = false;
        result.audioFileName0_ = "";
        return this;
      }
      
      public bool HasAudioFileName1 {
        get { return result.hasAudioFileName1; }
      }
      public string AudioFileName1 {
        get { return result.AudioFileName1; }
        set { SetAudioFileName1(value); }
      }
      public Builder SetAudioFileName1(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasAudioFileName1 = true;
        result.audioFileName1_ = value;
        return this;
      }
      public Builder ClearAudioFileName1() {
        PrepareBuilder();
        result.hasAudioFileName1 = false;
        result.audioFileName1_ = "";
        return this;
      }
      
      public bool HasAudioFileName2 {
        get { return result.hasAudioFileName2; }
      }
      public string AudioFileName2 {
        get { return result.AudioFileName2; }
        set { SetAudioFileName2(value); }
      }
      public Builder SetAudioFileName2(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasAudioFileName2 = true;
        result.audioFileName2_ = value;
        return this;
      }
      public Builder ClearAudioFileName2() {
        PrepareBuilder();
        result.hasAudioFileName2 = false;
        result.audioFileName2_ = "";
        return this;
      }
      
      public bool HasAudioFileName3 {
        get { return result.hasAudioFileName3; }
      }
      public string AudioFileName3 {
        get { return result.AudioFileName3; }
        set { SetAudioFileName3(value); }
      }
      public Builder SetAudioFileName3(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasAudioFileName3 = true;
        result.audioFileName3_ = value;
        return this;
      }
      public Builder ClearAudioFileName3() {
        PrepareBuilder();
        result.hasAudioFileName3 = false;
        result.audioFileName3_ = "";
        return this;
      }
      
      public bool HasVbiFileName {
        get { return result.hasVbiFileName; }
      }
      public string VbiFileName {
        get { return result.VbiFileName; }
        set { SetVbiFileName(value); }
      }
      public Builder SetVbiFileName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasVbiFileName = true;
        result.vbiFileName_ = value;
        return this;
      }
      public Builder ClearVbiFileName() {
        PrepareBuilder();
        result.hasVbiFileName = false;
        result.vbiFileName_ = "";
        return this;
      }
      
      public bool HasUseTDIR {
        get { return result.hasUseTDIR; }
      }
      public bool UseTDIR {
        get { return result.UseTDIR; }
        set { SetUseTDIR(value); }
      }
      public Builder SetUseTDIR(bool value) {
        PrepareBuilder();
        result.hasUseTDIR = true;
        result.useTDIR_ = value;
        return this;
      }
      public Builder ClearUseTDIR() {
        PrepareBuilder();
        result.hasUseTDIR = false;
        result.useTDIR_ = false;
        return this;
      }
      
      public bool HasInitialFrame {
        get { return result.hasInitialFrame; }
      }
      [global::System.CLSCompliant(false)]
      public uint InitialFrame {
        get { return result.InitialFrame; }
        set { SetInitialFrame(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetInitialFrame(uint value) {
        PrepareBuilder();
        result.hasInitialFrame = true;
        result.initialFrame_ = value;
        return this;
      }
      public Builder ClearInitialFrame() {
        PrepareBuilder();
        result.hasInitialFrame = false;
        result.initialFrame_ = 0;
        return this;
      }
      
      public bool HasInitialRate {
        get { return result.hasInitialRate; }
      }
      public double InitialRate {
        get { return result.InitialRate; }
        set { SetInitialRate(value); }
      }
      public Builder SetInitialRate(double value) {
        PrepareBuilder();
        result.hasInitialRate = true;
        result.initialRate_ = value;
        return this;
      }
      public Builder ClearInitialRate() {
        PrepareBuilder();
        result.hasInitialRate = false;
        result.initialRate_ = 0D;
        return this;
      }
      
      public bool HasLoop {
        get { return result.hasLoop; }
      }
      public bool Loop {
        get { return result.Loop; }
        set { SetLoop(value); }
      }
      public Builder SetLoop(bool value) {
        PrepareBuilder();
        result.hasLoop = true;
        result.loop_ = value;
        return this;
      }
      public Builder ClearLoop() {
        PrepareBuilder();
        result.hasLoop = false;
        result.loop_ = false;
        return this;
      }
    }
    static Command() {
      object.ReferenceEquals(global::TRMS.MessagingComparisons.Protos.BenchmarkProtos.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class CommandResponse : pb::GeneratedMessage<CommandResponse, CommandResponse.Builder> {
    private CommandResponse() { }
    private static readonly CommandResponse defaultInstance = new CommandResponse().MakeReadOnly();
    private static readonly string[] _commandResponseFieldNames = new string[] { "description", "hr" };
    private static readonly uint[] _commandResponseFieldTags = new uint[] { 18, 8 };
    public static CommandResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CommandResponse DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CommandResponse ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::TRMS.MessagingComparisons.Protos.BenchmarkProtos.internal__static_benchmarks_CommandResponse__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<CommandResponse, CommandResponse.Builder> InternalFieldAccessors {
      get { return global::TRMS.MessagingComparisons.Protos.BenchmarkProtos.internal__static_benchmarks_CommandResponse__FieldAccessorTable; }
    }
    
    public const int HrFieldNumber = 1;
    private bool hasHr;
    private int hr_;
    public bool HasHr {
      get { return hasHr; }
    }
    public int Hr {
      get { return hr_; }
    }
    
    public const int DescriptionFieldNumber = 2;
    private bool hasDescription;
    private string description_ = "";
    public bool HasDescription {
      get { return hasDescription; }
    }
    public string Description {
      get { return description_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _commandResponseFieldNames;
      if (hasHr) {
        output.WriteInt32(1, field_names[1], Hr);
      }
      if (hasDescription) {
        output.WriteString(2, field_names[0], Description);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasHr) {
          size += pb::CodedOutputStream.ComputeInt32Size(1, Hr);
        }
        if (hasDescription) {
          size += pb::CodedOutputStream.ComputeStringSize(2, Description);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static CommandResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CommandResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CommandResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CommandResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CommandResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CommandResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CommandResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CommandResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CommandResponse ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CommandResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CommandResponse MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CommandResponse prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<CommandResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CommandResponse cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CommandResponse result;
      
      private CommandResponse PrepareBuilder() {
        if (resultIsReadOnly) {
          CommandResponse original = result;
          result = new CommandResponse();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CommandResponse MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::TRMS.MessagingComparisons.Protos.CommandResponse.Descriptor; }
      }
      
      public override CommandResponse DefaultInstanceForType {
        get { return global::TRMS.MessagingComparisons.Protos.CommandResponse.DefaultInstance; }
      }
      
      public override CommandResponse BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is CommandResponse) {
          return MergeFrom((CommandResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CommandResponse other) {
        if (other == global::TRMS.MessagingComparisons.Protos.CommandResponse.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasHr) {
          Hr = other.Hr;
        }
        if (other.HasDescription) {
          Description = other.Description;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_commandResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _commandResponseFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasHr = input.ReadInt32(ref result.hr_);
              break;
            }
            case 18: {
              result.hasDescription = input.ReadString(ref result.description_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasHr {
        get { return result.hasHr; }
      }
      public int Hr {
        get { return result.Hr; }
        set { SetHr(value); }
      }
      public Builder SetHr(int value) {
        PrepareBuilder();
        result.hasHr = true;
        result.hr_ = value;
        return this;
      }
      public Builder ClearHr() {
        PrepareBuilder();
        result.hasHr = false;
        result.hr_ = 0;
        return this;
      }
      
      public bool HasDescription {
        get { return result.hasDescription; }
      }
      public string Description {
        get { return result.Description; }
        set { SetDescription(value); }
      }
      public Builder SetDescription(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasDescription = true;
        result.description_ = value;
        return this;
      }
      public Builder ClearDescription() {
        PrepareBuilder();
        result.hasDescription = false;
        result.description_ = "";
        return this;
      }
    }
    static CommandResponse() {
      object.ReferenceEquals(global::TRMS.MessagingComparisons.Protos.BenchmarkProtos.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class DataRequest : pb::GeneratedMessage<DataRequest, DataRequest.Builder> {
    private DataRequest() { }
    private static readonly DataRequest defaultInstance = new DataRequest().MakeReadOnly();
    private static readonly string[] _dataRequestFieldNames = new string[] { "command", "resolution", "videoFileName" };
    private static readonly uint[] _dataRequestFieldTags = new uint[] { 10, 26, 18 };
    public static DataRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override DataRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override DataRequest ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::TRMS.MessagingComparisons.Protos.BenchmarkProtos.internal__static_benchmarks_DataRequest__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<DataRequest, DataRequest.Builder> InternalFieldAccessors {
      get { return global::TRMS.MessagingComparisons.Protos.BenchmarkProtos.internal__static_benchmarks_DataRequest__FieldAccessorTable; }
    }
    
    public const int CommandFieldNumber = 1;
    private bool hasCommand;
    private string command_ = "";
    public bool HasCommand {
      get { return hasCommand; }
    }
    public string Command {
      get { return command_; }
    }
    
    public const int VideoFileNameFieldNumber = 2;
    private bool hasVideoFileName;
    private string videoFileName_ = "";
    public bool HasVideoFileName {
      get { return hasVideoFileName; }
    }
    public string VideoFileName {
      get { return videoFileName_; }
    }
    
    public const int ResolutionFieldNumber = 3;
    private bool hasResolution;
    private string resolution_ = "";
    public bool HasResolution {
      get { return hasResolution; }
    }
    public string Resolution {
      get { return resolution_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _dataRequestFieldNames;
      if (hasCommand) {
        output.WriteString(1, field_names[0], Command);
      }
      if (hasVideoFileName) {
        output.WriteString(2, field_names[2], VideoFileName);
      }
      if (hasResolution) {
        output.WriteString(3, field_names[1], Resolution);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasCommand) {
          size += pb::CodedOutputStream.ComputeStringSize(1, Command);
        }
        if (hasVideoFileName) {
          size += pb::CodedOutputStream.ComputeStringSize(2, VideoFileName);
        }
        if (hasResolution) {
          size += pb::CodedOutputStream.ComputeStringSize(3, Resolution);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static DataRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static DataRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static DataRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static DataRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static DataRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static DataRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static DataRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static DataRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static DataRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static DataRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private DataRequest MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(DataRequest prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<DataRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(DataRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private DataRequest result;
      
      private DataRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          DataRequest original = result;
          result = new DataRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override DataRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::TRMS.MessagingComparisons.Protos.DataRequest.Descriptor; }
      }
      
      public override DataRequest DefaultInstanceForType {
        get { return global::TRMS.MessagingComparisons.Protos.DataRequest.DefaultInstance; }
      }
      
      public override DataRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is DataRequest) {
          return MergeFrom((DataRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(DataRequest other) {
        if (other == global::TRMS.MessagingComparisons.Protos.DataRequest.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasCommand) {
          Command = other.Command;
        }
        if (other.HasVideoFileName) {
          VideoFileName = other.VideoFileName;
        }
        if (other.HasResolution) {
          Resolution = other.Resolution;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_dataRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _dataRequestFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasCommand = input.ReadString(ref result.command_);
              break;
            }
            case 18: {
              result.hasVideoFileName = input.ReadString(ref result.videoFileName_);
              break;
            }
            case 26: {
              result.hasResolution = input.ReadString(ref result.resolution_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasCommand {
        get { return result.hasCommand; }
      }
      public string Command {
        get { return result.Command; }
        set { SetCommand(value); }
      }
      public Builder SetCommand(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasCommand = true;
        result.command_ = value;
        return this;
      }
      public Builder ClearCommand() {
        PrepareBuilder();
        result.hasCommand = false;
        result.command_ = "";
        return this;
      }
      
      public bool HasVideoFileName {
        get { return result.hasVideoFileName; }
      }
      public string VideoFileName {
        get { return result.VideoFileName; }
        set { SetVideoFileName(value); }
      }
      public Builder SetVideoFileName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasVideoFileName = true;
        result.videoFileName_ = value;
        return this;
      }
      public Builder ClearVideoFileName() {
        PrepareBuilder();
        result.hasVideoFileName = false;
        result.videoFileName_ = "";
        return this;
      }
      
      public bool HasResolution {
        get { return result.hasResolution; }
      }
      public string Resolution {
        get { return result.Resolution; }
        set { SetResolution(value); }
      }
      public Builder SetResolution(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasResolution = true;
        result.resolution_ = value;
        return this;
      }
      public Builder ClearResolution() {
        PrepareBuilder();
        result.hasResolution = false;
        result.resolution_ = "";
        return this;
      }
    }
    static DataRequest() {
      object.ReferenceEquals(global::TRMS.MessagingComparisons.Protos.BenchmarkProtos.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class DataRequestResponse : pb::GeneratedMessage<DataRequestResponse, DataRequestResponse.Builder> {
    private DataRequestResponse() { }
    private static readonly DataRequestResponse defaultInstance = new DataRequestResponse().MakeReadOnly();
    private static readonly string[] _dataRequestResponseFieldNames = new string[] { "audioBitsPerSample", "audioCodec", "audioSampleRate", "audioTrackCount", "bitrate", "decoder", "frameRate", "resolution", "videoCodec", "videoFileName" };
    private static readonly uint[] _dataRequestResponseFieldTags = new uint[] { 72, 66, 16, 80, 40, 58, 49, 34, 26, 10 };
    public static DataRequestResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override DataRequestResponse DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override DataRequestResponse ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::TRMS.MessagingComparisons.Protos.BenchmarkProtos.internal__static_benchmarks_DataRequestResponse__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<DataRequestResponse, DataRequestResponse.Builder> InternalFieldAccessors {
      get { return global::TRMS.MessagingComparisons.Protos.BenchmarkProtos.internal__static_benchmarks_DataRequestResponse__FieldAccessorTable; }
    }
    
    public const int VideoFileNameFieldNumber = 1;
    private bool hasVideoFileName;
    private string videoFileName_ = "";
    public bool HasVideoFileName {
      get { return hasVideoFileName; }
    }
    public string VideoFileName {
      get { return videoFileName_; }
    }
    
    public const int AudioSampleRateFieldNumber = 2;
    private bool hasAudioSampleRate;
    private uint audioSampleRate_;
    public bool HasAudioSampleRate {
      get { return hasAudioSampleRate; }
    }
    [global::System.CLSCompliant(false)]
    public uint AudioSampleRate {
      get { return audioSampleRate_; }
    }
    
    public const int VideoCodecFieldNumber = 3;
    private bool hasVideoCodec;
    private string videoCodec_ = "";
    public bool HasVideoCodec {
      get { return hasVideoCodec; }
    }
    public string VideoCodec {
      get { return videoCodec_; }
    }
    
    public const int ResolutionFieldNumber = 4;
    private bool hasResolution;
    private string resolution_ = "";
    public bool HasResolution {
      get { return hasResolution; }
    }
    public string Resolution {
      get { return resolution_; }
    }
    
    public const int BitrateFieldNumber = 5;
    private bool hasBitrate;
    private int bitrate_;
    public bool HasBitrate {
      get { return hasBitrate; }
    }
    public int Bitrate {
      get { return bitrate_; }
    }
    
    public const int FrameRateFieldNumber = 6;
    private bool hasFrameRate;
    private double frameRate_;
    public bool HasFrameRate {
      get { return hasFrameRate; }
    }
    public double FrameRate {
      get { return frameRate_; }
    }
    
    public const int DecoderFieldNumber = 7;
    private bool hasDecoder;
    private string decoder_ = "";
    public bool HasDecoder {
      get { return hasDecoder; }
    }
    public string Decoder {
      get { return decoder_; }
    }
    
    public const int AudioCodecFieldNumber = 8;
    private bool hasAudioCodec;
    private string audioCodec_ = "";
    public bool HasAudioCodec {
      get { return hasAudioCodec; }
    }
    public string AudioCodec {
      get { return audioCodec_; }
    }
    
    public const int AudioBitsPerSampleFieldNumber = 9;
    private bool hasAudioBitsPerSample;
    private int audioBitsPerSample_;
    public bool HasAudioBitsPerSample {
      get { return hasAudioBitsPerSample; }
    }
    public int AudioBitsPerSample {
      get { return audioBitsPerSample_; }
    }
    
    public const int AudioTrackCountFieldNumber = 10;
    private bool hasAudioTrackCount;
    private int audioTrackCount_;
    public bool HasAudioTrackCount {
      get { return hasAudioTrackCount; }
    }
    public int AudioTrackCount {
      get { return audioTrackCount_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _dataRequestResponseFieldNames;
      if (hasVideoFileName) {
        output.WriteString(1, field_names[9], VideoFileName);
      }
      if (hasAudioSampleRate) {
        output.WriteUInt32(2, field_names[2], AudioSampleRate);
      }
      if (hasVideoCodec) {
        output.WriteString(3, field_names[8], VideoCodec);
      }
      if (hasResolution) {
        output.WriteString(4, field_names[7], Resolution);
      }
      if (hasBitrate) {
        output.WriteInt32(5, field_names[4], Bitrate);
      }
      if (hasFrameRate) {
        output.WriteDouble(6, field_names[6], FrameRate);
      }
      if (hasDecoder) {
        output.WriteString(7, field_names[5], Decoder);
      }
      if (hasAudioCodec) {
        output.WriteString(8, field_names[1], AudioCodec);
      }
      if (hasAudioBitsPerSample) {
        output.WriteInt32(9, field_names[0], AudioBitsPerSample);
      }
      if (hasAudioTrackCount) {
        output.WriteInt32(10, field_names[3], AudioTrackCount);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasVideoFileName) {
          size += pb::CodedOutputStream.ComputeStringSize(1, VideoFileName);
        }
        if (hasAudioSampleRate) {
          size += pb::CodedOutputStream.ComputeUInt32Size(2, AudioSampleRate);
        }
        if (hasVideoCodec) {
          size += pb::CodedOutputStream.ComputeStringSize(3, VideoCodec);
        }
        if (hasResolution) {
          size += pb::CodedOutputStream.ComputeStringSize(4, Resolution);
        }
        if (hasBitrate) {
          size += pb::CodedOutputStream.ComputeInt32Size(5, Bitrate);
        }
        if (hasFrameRate) {
          size += pb::CodedOutputStream.ComputeDoubleSize(6, FrameRate);
        }
        if (hasDecoder) {
          size += pb::CodedOutputStream.ComputeStringSize(7, Decoder);
        }
        if (hasAudioCodec) {
          size += pb::CodedOutputStream.ComputeStringSize(8, AudioCodec);
        }
        if (hasAudioBitsPerSample) {
          size += pb::CodedOutputStream.ComputeInt32Size(9, AudioBitsPerSample);
        }
        if (hasAudioTrackCount) {
          size += pb::CodedOutputStream.ComputeInt32Size(10, AudioTrackCount);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static DataRequestResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static DataRequestResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static DataRequestResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static DataRequestResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static DataRequestResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static DataRequestResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static DataRequestResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static DataRequestResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static DataRequestResponse ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static DataRequestResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private DataRequestResponse MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(DataRequestResponse prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<DataRequestResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(DataRequestResponse cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private DataRequestResponse result;
      
      private DataRequestResponse PrepareBuilder() {
        if (resultIsReadOnly) {
          DataRequestResponse original = result;
          result = new DataRequestResponse();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override DataRequestResponse MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::TRMS.MessagingComparisons.Protos.DataRequestResponse.Descriptor; }
      }
      
      public override DataRequestResponse DefaultInstanceForType {
        get { return global::TRMS.MessagingComparisons.Protos.DataRequestResponse.DefaultInstance; }
      }
      
      public override DataRequestResponse BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is DataRequestResponse) {
          return MergeFrom((DataRequestResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(DataRequestResponse other) {
        if (other == global::TRMS.MessagingComparisons.Protos.DataRequestResponse.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasVideoFileName) {
          VideoFileName = other.VideoFileName;
        }
        if (other.HasAudioSampleRate) {
          AudioSampleRate = other.AudioSampleRate;
        }
        if (other.HasVideoCodec) {
          VideoCodec = other.VideoCodec;
        }
        if (other.HasResolution) {
          Resolution = other.Resolution;
        }
        if (other.HasBitrate) {
          Bitrate = other.Bitrate;
        }
        if (other.HasFrameRate) {
          FrameRate = other.FrameRate;
        }
        if (other.HasDecoder) {
          Decoder = other.Decoder;
        }
        if (other.HasAudioCodec) {
          AudioCodec = other.AudioCodec;
        }
        if (other.HasAudioBitsPerSample) {
          AudioBitsPerSample = other.AudioBitsPerSample;
        }
        if (other.HasAudioTrackCount) {
          AudioTrackCount = other.AudioTrackCount;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_dataRequestResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _dataRequestResponseFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasVideoFileName = input.ReadString(ref result.videoFileName_);
              break;
            }
            case 16: {
              result.hasAudioSampleRate = input.ReadUInt32(ref result.audioSampleRate_);
              break;
            }
            case 26: {
              result.hasVideoCodec = input.ReadString(ref result.videoCodec_);
              break;
            }
            case 34: {
              result.hasResolution = input.ReadString(ref result.resolution_);
              break;
            }
            case 40: {
              result.hasBitrate = input.ReadInt32(ref result.bitrate_);
              break;
            }
            case 49: {
              result.hasFrameRate = input.ReadDouble(ref result.frameRate_);
              break;
            }
            case 58: {
              result.hasDecoder = input.ReadString(ref result.decoder_);
              break;
            }
            case 66: {
              result.hasAudioCodec = input.ReadString(ref result.audioCodec_);
              break;
            }
            case 72: {
              result.hasAudioBitsPerSample = input.ReadInt32(ref result.audioBitsPerSample_);
              break;
            }
            case 80: {
              result.hasAudioTrackCount = input.ReadInt32(ref result.audioTrackCount_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasVideoFileName {
        get { return result.hasVideoFileName; }
      }
      public string VideoFileName {
        get { return result.VideoFileName; }
        set { SetVideoFileName(value); }
      }
      public Builder SetVideoFileName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasVideoFileName = true;
        result.videoFileName_ = value;
        return this;
      }
      public Builder ClearVideoFileName() {
        PrepareBuilder();
        result.hasVideoFileName = false;
        result.videoFileName_ = "";
        return this;
      }
      
      public bool HasAudioSampleRate {
        get { return result.hasAudioSampleRate; }
      }
      [global::System.CLSCompliant(false)]
      public uint AudioSampleRate {
        get { return result.AudioSampleRate; }
        set { SetAudioSampleRate(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetAudioSampleRate(uint value) {
        PrepareBuilder();
        result.hasAudioSampleRate = true;
        result.audioSampleRate_ = value;
        return this;
      }
      public Builder ClearAudioSampleRate() {
        PrepareBuilder();
        result.hasAudioSampleRate = false;
        result.audioSampleRate_ = 0;
        return this;
      }
      
      public bool HasVideoCodec {
        get { return result.hasVideoCodec; }
      }
      public string VideoCodec {
        get { return result.VideoCodec; }
        set { SetVideoCodec(value); }
      }
      public Builder SetVideoCodec(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasVideoCodec = true;
        result.videoCodec_ = value;
        return this;
      }
      public Builder ClearVideoCodec() {
        PrepareBuilder();
        result.hasVideoCodec = false;
        result.videoCodec_ = "";
        return this;
      }
      
      public bool HasResolution {
        get { return result.hasResolution; }
      }
      public string Resolution {
        get { return result.Resolution; }
        set { SetResolution(value); }
      }
      public Builder SetResolution(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasResolution = true;
        result.resolution_ = value;
        return this;
      }
      public Builder ClearResolution() {
        PrepareBuilder();
        result.hasResolution = false;
        result.resolution_ = "";
        return this;
      }
      
      public bool HasBitrate {
        get { return result.hasBitrate; }
      }
      public int Bitrate {
        get { return result.Bitrate; }
        set { SetBitrate(value); }
      }
      public Builder SetBitrate(int value) {
        PrepareBuilder();
        result.hasBitrate = true;
        result.bitrate_ = value;
        return this;
      }
      public Builder ClearBitrate() {
        PrepareBuilder();
        result.hasBitrate = false;
        result.bitrate_ = 0;
        return this;
      }
      
      public bool HasFrameRate {
        get { return result.hasFrameRate; }
      }
      public double FrameRate {
        get { return result.FrameRate; }
        set { SetFrameRate(value); }
      }
      public Builder SetFrameRate(double value) {
        PrepareBuilder();
        result.hasFrameRate = true;
        result.frameRate_ = value;
        return this;
      }
      public Builder ClearFrameRate() {
        PrepareBuilder();
        result.hasFrameRate = false;
        result.frameRate_ = 0D;
        return this;
      }
      
      public bool HasDecoder {
        get { return result.hasDecoder; }
      }
      public string Decoder {
        get { return result.Decoder; }
        set { SetDecoder(value); }
      }
      public Builder SetDecoder(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasDecoder = true;
        result.decoder_ = value;
        return this;
      }
      public Builder ClearDecoder() {
        PrepareBuilder();
        result.hasDecoder = false;
        result.decoder_ = "";
        return this;
      }
      
      public bool HasAudioCodec {
        get { return result.hasAudioCodec; }
      }
      public string AudioCodec {
        get { return result.AudioCodec; }
        set { SetAudioCodec(value); }
      }
      public Builder SetAudioCodec(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasAudioCodec = true;
        result.audioCodec_ = value;
        return this;
      }
      public Builder ClearAudioCodec() {
        PrepareBuilder();
        result.hasAudioCodec = false;
        result.audioCodec_ = "";
        return this;
      }
      
      public bool HasAudioBitsPerSample {
        get { return result.hasAudioBitsPerSample; }
      }
      public int AudioBitsPerSample {
        get { return result.AudioBitsPerSample; }
        set { SetAudioBitsPerSample(value); }
      }
      public Builder SetAudioBitsPerSample(int value) {
        PrepareBuilder();
        result.hasAudioBitsPerSample = true;
        result.audioBitsPerSample_ = value;
        return this;
      }
      public Builder ClearAudioBitsPerSample() {
        PrepareBuilder();
        result.hasAudioBitsPerSample = false;
        result.audioBitsPerSample_ = 0;
        return this;
      }
      
      public bool HasAudioTrackCount {
        get { return result.hasAudioTrackCount; }
      }
      public int AudioTrackCount {
        get { return result.AudioTrackCount; }
        set { SetAudioTrackCount(value); }
      }
      public Builder SetAudioTrackCount(int value) {
        PrepareBuilder();
        result.hasAudioTrackCount = true;
        result.audioTrackCount_ = value;
        return this;
      }
      public Builder ClearAudioTrackCount() {
        PrepareBuilder();
        result.hasAudioTrackCount = false;
        result.audioTrackCount_ = 0;
        return this;
      }
    }
    static DataRequestResponse() {
      object.ReferenceEquals(global::TRMS.MessagingComparisons.Protos.BenchmarkProtos.Descriptor, null);
    }
  }
  
  #endregion
  
}

#endregion Designer generated code
